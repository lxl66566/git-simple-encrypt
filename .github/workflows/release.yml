name: Build/publish release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  create-release:
    if: (startsWith(github.ref_name, 'v') && github.ref_type == 'tag')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          title: $version
          token: ${{ secrets.GH_TOKEN }}

  release:
    name: Binary ${{ matrix.target }} (on ${{ matrix.os }})
    continue-on-error: false
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            compress: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            compress: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            compress: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            compress: true
          - os: windows-latest
            compress: true
          - os: macos-latest
            target: x86_64-apple-darwin
            compress: true
          - os: macos-latest
            target: aarch64-apple-darwin
            compress: true
          - os: ubuntu-latest
            target: x86_64-unknown-freebsd
            compress: true

    # The type of runner that the job will run on
    # Runs on Ubuntu if other os is not specified above
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 90
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: create version file
        if: (startsWith(github.ref_name, 'v') && github.ref_type == 'tag')
        run: echo "${{github.ref_name}}" | tail -c+2  >> .build_version

      - name: Get version from tag
        id: extract_version
        run: |
          echo "version=${GITHUB_REF_NAME#v}" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Setup Rust toolchain
        # uses: dtolnay/rust-toolchain@nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - run: sudo apt install musl-tools
        if: startsWith(matrix.os, 'ubuntu')

      - name: Install openssl on ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt install pkg-config libssl-dev

      - name: Install openssl on ubuntu arm64
        if: startsWith(matrix.os, 'ubuntu') && startsWith(matrix.target, 'aarch64')
        run: sudo apt-get update && sudo apt-get install --assume-yes libssl-dev:arm64

      - name: Install openssl on macos
        if: startsWith(matrix.os, 'macos')
        run: brew install openssl

      - name: Install openssl on windows
        if: startsWith(matrix.os, 'windows')
        run: choco install openssl

      # - name: cargo build
      #   uses: houseabsolute/actions-rust-cross@v0
      #   with:
      #     command: build
      #     args: --release --locked --bin git-se ${{ matrix.cargo_flags }}
      #     target: ${{ matrix.target }}

      - name: Build and Upload
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: git-se
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GH_TOKEN }}

  publish:
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust toolchain
        # uses: dtolnay/rust-toolchain@nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Install openssl
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt install pkg-config libssl-dev
      - uses: katyo/publish-crates@v2
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
